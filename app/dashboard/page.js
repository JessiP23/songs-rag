'use client'

import React, { useState, useEffect } from "react";
import { where, query, collection, deleteDoc, getDocs, doc, addDoc } from 'firebase/firestore';
import { useRouter } from 'next/navigation';
import Header from "@/components/Header";
import { Card, CardHeader, CardBody, CardFooter, Divider, Link, Button } from "@nextui-org/react";
import { db } from "@/firebaseConfig";
import { useUser, SignedIn, SignedOut, SignInButton } from '@clerk/nextjs';
import { useClerk } from "@clerk/nextjs";
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';
import { Line } from "react-chartjs-2";

// line graph elements register feature
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

// This page will show the songs generated by the chatbot, number of songs, and the number of comments made by the user. 
// the number of songs is based on the acutal number of songs in the dashbaord
// the number of comments come from the global platform



// IMPORTANT
// firestoreId is used as the ID of getting data from the database,
// id is used when submitting songs from the chatbot to the firebase,
// so if you decide to use id instead of firebaseId will return an error of duplicate id


const CardComponent = () => {
  const [songs, setSongs] = useState([]);
  const [commentCount, setCommentCount] = useState(0);
  // clerk authentication
  const { user } = useUser();
  const router = useRouter();
  const { signOut } = useClerk();

  // fetch songs from firebase in the url /users/user_2kqI7e0bL6EFeDQwKxBdWPETHEN/songs/bQWTlPXcHXmT2Jb7V1WR
  const fetchSongs = async () => {
    if (!user) return;

    // configuration to fetch songs based on the url reference
    try {
      const userDocRef = doc(db, 'users', user.id);
      // songs query reference from firebase
      const userSongsRef = collection(userDocRef, 'songs');
      const q = query(userSongsRef);
      const querySnapshot = await getDocs(q);
      // get data from firebase with user id
      const songsList = querySnapshot.docs.map(doc => ({ firestoreId: doc.id, ...doc.data() }));
      setSongs(songsList);
      await fetchUserCommentsCount(); // Fetch comments count for the user
    } catch (error) {
      console.error("Error fetching songs:", error);
    }
  };

  // count the number of comments of that authenticated user from globalSongs page.
  const fetchUserCommentsCount = async () => {
    if (!user) return;

    // collect count from the globalSongs collection

    try {
      const globalSongsRef = collection(db, 'globalSongs');
      const querySnapshot = await getDocs(globalSongsRef);
      // get data from the songs by using the id
      const globalSongsList = querySnapshot.docs.map(doc => ({ firestoreId: doc.id, ...doc.data() }));

      // initialize the number of comments to 0
      let count = 0;

      // iterate over each song and look for the comments field

      for (const song of globalSongsList) {
        const commentsRef = collection(doc(db, 'globalSongs', song.firestoreId), 'comments');
        const commentsSnapshot = await getDocs(commentsRef);

        // once the comment is found, iterate over them to identify which comment belongs to each user.
        // if comment belong to the authenticated user, then it will be added 1 comment
        commentsSnapshot.forEach(commentDoc => {
          const commentData = commentDoc.data();
          if (commentData.userId === user.id) {
            count += 1;
          }
        });
      }

      // update the count of comments

      setCommentCount(count);
    } catch (error) {
      console.error("Error fetching user comments count:", error);
    }
  };

  const addSong = async (newSong) => {
    try {
      const userDocRef = doc(db, 'users', user.id);
      const userSongsRef = collection(userDocRef, 'songs');
      await addDoc(userSongsRef, newSong);
      fetchSongs();
    } catch (error) {
      console.error("Error adding song:", error);
    }
  };

  // CRUD operations within firebase
  // delete songs based on firestoreId

  const deleteSong = async (firestoreId) => {
    try {
      const userDocRef = doc(db, 'users', user.id);
      const songDocRef = doc(userDocRef, 'songs', firestoreId);
      await deleteDoc(songDocRef);
      fetchSongs();
    } catch (error) {
      console.error("Error deleting song:", error);
    }
  };

  // transfer songs from dashboard 
  // add properties as likes, dislikes, and comments object.
  const addSongToGlobalPlatform = async (song) => {
    try {
      await addDoc(collection(db, 'globalSongs'), { ...song, userId: user.id, likes: 0, dislikes: 0, comments: [] });
      console.log(`Song added to global platform: ${song.title}`);
    } catch (error) {
      console.error("Error adding song to global platform:", error);
    }
  };

  const handleSignOut = async () => {
    await signOut();
    router.push('/');
  };

  // fetch songs based on the user 

  useEffect(() => {
    fetchSongs();
  }, [user]);

  return (
    // frontend
    <div>
      <Header />
      {/* if user is authenticated retrieved this content */}
      <SignedIn>
        <div className="p-8 bg-gray-50 min-h-screen">
          <div className="flex flex-col lg:flex-row w-full space-y-4 lg:space-y-0 lg:space-x-4">
            <div className="flex-1 overflow-x-auto bg-white rounded-lg shadow-lg">
              <h1 className="p-6 text-center mb-6 font-bold text-3xl text-gray-800 border-b border-gray-200">Song List</h1>
              <div
                className="flex flex-row flex-wrap overflow-x-auto"
                style={{
                  width: '100%',
                  height: '400px',
                  overflowX: 'auto',
                  padding: '20px',
                }}
              >
                {/* iterate chatbot songs from the firebase */}
                {songs.map((song) => (
                  <Card
                    key={song.firestoreId}
                    className="w-full sm:w-80 md:w-72 lg:w-60 m-4 border border-gray-300 rounded-lg shadow-md p-4 bg-white"
                    style={{
                      flex: '0 0 auto',
                      marginRight: '20px',
                    }}
                  >
                    <CardHeader className="flex gap-3 items-center">
                      <div className="flex flex-col">
                        <p className="text-xl font-semibold text-gray-900">{song.title}</p>
                        <p className="text-sm text-gray-500">{song.channel}</p>
                      </div>
                    </CardHeader>
                    <Divider />
                    <CardBody>
                      <p className="text-gray-700">{song.description}</p>
                    </CardBody>
                    <Divider />
                    <CardFooter className="flex flex-col sm:flex-row sm:justify-between items-center">
                      <Link
                        isExternal
                        showAnchorIcon
                        href={song.link}
                        className="text-red-500 hover:text-red-700 mb-2 sm:mb-0"
                      >
                        Listen Song
                      </Link>
                      <div className="flex space-x-2">
                        <Button onClick={() => deleteSong(song.firestoreId)} className="text-red-600 hover:text-red-800">Delete</Button>
                        <Button onClick={() => addSongToGlobalPlatform(song)} className="text-blue-600 hover:text-blue-800">Add to Global Platform</Button>
                      </div>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </div>
            <div className="w-full lg:w-1/3 bg-white rounded-lg shadow-lg p-6">
              <h1 className="text-xl font-bold text-gray-800 mb-4">Analytics</h1>
              <div className="mb-8">
                <h2 className="text-lg font-semibold text-gray-600">Number of songs:</h2>
                <div className="text-4xl font-bold text-gray-900">{songs.length}</div>
              </div>
              <div className="mb-8">
                <h2 className="text-lg font-semibold text-gray-600">Number of comments:</h2>
                <div className="text-4xl font-bold text-gray-900">{commentCount}</div>
              </div>
              <div className="w-full h-64">
                <Line
                // graph that contains the number of songs and the number of comments
                  data={{
                    labels: ['Songs', 'Comments'],
                    datasets: [
                      // count feature
                      {
                        label: 'Count',
                        data: [songs.length, commentCount],
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1,
                      },
                    ],
                  }}
                  options={{
                    responsive: true,
                    plugins: {
                      legend: {
                        display: true,
                      },
                      tooltip: {
                        callbacks: {
                          label: (tooltipItem) => {
                            return `${tooltipItem.label}: ${tooltipItem.raw}`;
                          },
                        },
                      },
                    },
                    scales: {
                      y: {
                        beginAtZero: true,
                      },
                    },
                  }}
                />
              </div>
            </div>
          </div>
        </div>
      </SignedIn>


    {/* if user is not authenticated, retrieved a page with the link to authenticate */}
      <SignedOut>
        <div className="flex flex-col items-center justify-center h-screen p-4">
          <div className="text-center mb-4">
            <p className="text-lg text-gray-600">You are not authenticated. Click below to sign up or log in.</p>
            <SignInButton mode="modal" forceRedirectUrl="/dashboard">
              <Button className="bg-orange-500 hover:bg-orange-700 text-white font-bold py-4 px-8 rounded shadow-md mt-4">
                Sign up
              </Button>
            </SignInButton>
          </div>
        </div>
      </SignedOut>
    </div>
  );
};

export default CardComponent;
